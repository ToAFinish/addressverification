/*
    PLEASE NOTE THAT THIS TRIGGER HAS BEEN REPLACED WITH THE "autoVerifyOfficeAddress" ONE

    THIS TRIGGER AUTOMATES THE VERIFICATION OF AN ADDRESS
    ON A CUSTOM OBJECT (OFFICE__C)
    AND RESETS THE "VERIFIED" FLAG ON THE ADDRESS(ES)
    SO THAT WHEN THE "VERIFY ADDRESSES" BUTTON IS PRESSED IN 
    THE RECORD LAYOUT, THE SYSTEM WILL ACTUALLY ATTEMPT TO 
    VERIFY IT.  WE DO THIS TO CONSERVE API CALLS.  IF THE 
    ADDRESS WAS PREVIOUSLY VERIFIED AND HAS NOT CHANGED, WHY
    ATTEMPT TO VERIFY IT AGAIN?

*/
trigger officeAddressTrigger on Office__c (before update, after insert, after update)
{
    // DO ONLY FOR UPDATES (NOT INSERTS) AND ONLY BEFORE AN UPDATE IS DONE
    if(trigger.isBefore && trigger.isUpdate) {
        If(trigger.isUpdate && trigger.isBefore) {
            // FOR EACH RECORD AFFECTED BY THIS TRIGGER
            For (Office__c tNew:Trigger.new) {
                // GET VALUES BEFORE UPDATE (CURRENT VALUES)
                Office__c tOld = System.Trigger.oldMap.get(tNew.Id); 
                
                // CHECK IF  ADDRESS HAS BEEN CHANGED
                If(tNew.Address_Last_Verified__c == tOld.Address_Last_Verified__c && (tNew.Street__c != tOld.Street__c || 
                   tNew.City__c != tOld.City__c || tNew.State__c != tOld.State__c || tNew.Zip__c != tOld.Zip__c)) {
                   // SET THE  ADDRESS AS NOT HAVING BEEN VERIFIED
                   tNew.Address_Verified__c = FALSE;
                   If (tNew.Address_Return_Code__c != NULL) tNew.Address_Return_Code__c = 'Changed';
                }
            }
        }
    }

    if(trigger.isAfter){
        boolean b = trigger.isInsert?true:false;
        Set<Id> addrModifiedSet = new Set<Id>();
        try
        {
            // Only for UPDATES
            if(!b){
                for (Office__c x:Trigger.new) {
                    If(!x.AddressVerified__c && !x.DoNotVerify__c && x.Street__c != null && 
                        ((x.City__c != null && x.State__c != null) || x.Zip__c != null)){
                        addrModifiedSet.add(x.Id);
                    }      
                } 
            }
            if(checkRecursive.control_CustomBatch && !System.isBatch() && !System.isFuture()){
                 // check to make sure we can create a new job
                 if([SELECT count() FROM AsyncApexJob where Status IN ('Queued','Processing','Preparing','Holding')]<100){
                    smartystreets.BatchAddressVerification bav;
                    // For INSERTS pass all the records in the trigger context , and for UPDATES only pass those records which have addresses modified.
                    if(b){
                        bav = new smartystreets.BatchAddressVerification('select id from Office__c',trigger.newMap.keyset());
                        Database.executeBatch(bav,50);
                    } else {
                        if(addrModifiedSet<>null && addrModifiedSet.size()>0){
                            bav = new smartystreets.BatchAddressVerification('select id from Office__c',addrModifiedSet);
                            Database.executeBatch(bav,50);
                        }
                    }
                } else { 
                    // if not, schedule this same class again in 5 mins
                    ScheduleBatchOfficeAddressVerification sc = new ScheduleBatchOfficeAddressVerification();
                    Datetime dt = Datetime.now().addMinutes(5);
                    String timeForScheduler = dt.format('s m H d M \'?\' yyyy');
                    Id schedId = System.Schedule('OfficeVerificationQueueRetry'+timeForScheduler,timeForScheduler,sc);
                }
            }
        }
        catch(exception e)
        {
            system.debug('Exception::::'+e);
        }
    }
}
